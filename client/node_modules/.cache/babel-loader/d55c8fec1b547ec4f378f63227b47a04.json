{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tatar\\\\Documents\\\\Full Stack Projects\\\\O Tic-Tac-Toe - Copy\\\\client\\\\src\\\\components\\\\Board.js\";\nimport React from 'react';\nimport { Component } from 'react';\nimport Square from './Square';\nimport socket from './../apis/port';\n/*\r\ngameState = {            //packaged data sent to frontend\r\n    p1_name: \"\",\r\n    p2_name: \"\",\r\n    p1_score: 0,\r\n    p2_score: 0,\r\n    ties: 0,\r\n    p1_turn: true,\r\n    grid: [0,0,0,\r\n        0,0,0,\r\n        0,0,0]\r\n\r\n}\r\n*/\n\nexport default class Board extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isPlayer_one: this.props.isPlayer_one\n    };\n\n    this.playerMove = index => {\n      if (this.state.p1_turn === this.state.isPlayer_one && this.state.grid[index] === 0) {\n        if (this.state.isPlayer_one) {\n          socket.emit(\"player-move\", index, 1);\n        } else {\n          socket.emit(\"player-move\", index, -1);\n        }\n      }\n    };\n\n    this.render = () => {\n      console.log(\"board\");\n      console.log(this.props.gamestate);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }\n      }, this.state.grid.map((value, index) => {\n        return /*#__PURE__*/React.createElement(Square, {\n          val: value.toString(),\n          index: index,\n          gamestate: this.state,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 28\n          }\n        });\n      }));\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Tatar/Documents/Full Stack Projects/O Tic-Tac-Toe - Copy/client/src/components/Board.js"],"names":["React","Component","Square","socket","Board","state","isPlayer_one","props","playerMove","index","p1_turn","grid","emit","render","console","log","gamestate","map","value","toString"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,QAAwB,OAAxB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AAEA;;;;;;;;;;;;;;;AAgBA,eAAe,MAAMC,KAAN,SAAoBH,SAApB,CAA8B;AAAA;AAAA;AAAA,SAEzCI,KAFyC,GAEjC;AAEJC,MAAAA,YAAY,EAAE,KAAKC,KAAL,CAAWD;AAFrB,KAFiC;;AAAA,SAOzCE,UAPyC,GAO5BC,KAAK,IAAI;AAClB,UAAG,KAAKJ,KAAL,CAAWK,OAAX,KAAuB,KAAKL,KAAL,CAAWC,YAAlC,IACI,KAAKD,KAAL,CAAWM,IAAX,CAAgBF,KAAhB,MAAyB,CADhC,EACkC;AAC1B,YAAG,KAAKJ,KAAL,CAAWC,YAAd,EAA2B;AACvBH,UAAAA,MAAM,CAACS,IAAP,CAAY,aAAZ,EAA2BH,KAA3B,EAAkC,CAAlC;AACH,SAFD,MAGI;AACAN,UAAAA,MAAM,CAACS,IAAP,CAAY,aAAZ,EAA2BH,KAA3B,EAAkC,CAAC,CAAnC;AACH;AACR;AACJ,KAjBwC;;AAAA,SAoBzCI,MApByC,GAoBhC,MAAM;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKR,KAAL,CAAWS,SAAvB;AAEA,0BAEI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKX,KAAL,CAAWM,IAAX,CAAgBM,GAAhB,CAAoB,CAACC,KAAD,EAAOT,KAAP,KAAiB;AAClC,4BAAO,oBAAC,MAAD;AAAQ,UAAA,GAAG,EAAES,KAAK,CAACC,QAAN,EAAb;AAA+B,UAAA,KAAK,EAAEV,KAAtC;AAA6C,UAAA,SAAS,EAAE,KAAKJ,KAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,OAFA,CADL,CAFJ;AAYH,KApCwC;AAAA;;AAAA","sourcesContent":["import React from 'react';\r\nimport {Component} from 'react';\r\nimport Square from './Square';\r\nimport socket from './../apis/port';\r\n\r\n/*\r\ngameState = {            //packaged data sent to frontend\r\n    p1_name: \"\",\r\n    p2_name: \"\",\r\n    p1_score: 0,\r\n    p2_score: 0,\r\n    ties: 0,\r\n    p1_turn: true,\r\n    grid: [0,0,0,\r\n        0,0,0,\r\n        0,0,0]\r\n\r\n}\r\n*/\r\n\r\n\r\nexport default class Board extends Component {\r\n    \r\n    state = {\r\n        \r\n        isPlayer_one: this.props.isPlayer_one\r\n    }\r\n    \r\n    playerMove = index => {\r\n        if(this.state.p1_turn === this.state.isPlayer_one\r\n            && this.state.grid[index]===0){\r\n                if(this.state.isPlayer_one){\r\n                    socket.emit(\"player-move\", index, 1);\r\n                }\r\n                else{\r\n                    socket.emit(\"player-move\", index, -1);\r\n                }\r\n        }\r\n    }\r\n\r\n\r\n    render = () => {\r\n        console.log(\"board\");\r\n        console.log(this.props.gamestate);\r\n        \r\n        return (\r\n            \r\n            <div className=\"board\">\r\n                {this.state.grid.map((value,index) => {\r\n                    return <Square val={value.toString()} index={index} gamestate={this.state}/>\r\n                })}\r\n\r\n            \r\n                \r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}