{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\Tatar\\\\Documents\\\\Full Stack Projects\\\\O Tic-Tac-Toe\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"C:\\\\Users\\\\Tatar\\\\Documents\\\\Full Stack Projects\\\\O Tic-Tac-Toe\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _inherits from\"C:\\\\Users\\\\Tatar\\\\Documents\\\\Full Stack Projects\\\\O Tic-Tac-Toe\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\Tatar\\\\Documents\\\\Full Stack Projects\\\\O Tic-Tac-Toe\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React from'react';import{Component}from'react';import Square from'./Square';import socket from'./../apis/port';/*\r\ngameState = {            //packaged data sent to frontend\r\n    p1_name: \"\",\r\n    p2_name: \"\",\r\n    p1_score: 0,\r\n    p2_score: 0,\r\n    ties: 0,\r\n    p1_turn: true,\r\n    grid: [0,0,0,\r\n        0,0,0,\r\n        0,0,0]\r\n\r\n}\r\n*/var Board=/*#__PURE__*/function(_Component){_inherits(Board,_Component);var _super=_createSuper(Board);function Board(){var _this;_classCallCheck(this,Board);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.playerMove=function(index){if(_this.state.p1_turn===_this.state.isPlayer_one&&_this.state.grid[index]===0){if(_this.state.isPlayer_one){socket.emit(\"player-move\",index,1);}else{socket.emit(\"player-move\",index,-1);}}};_this.render=function(){var gamestate=_this.props.gamestate;return/*#__PURE__*/React.createElement(\"div\",{className:\"board\"},gamestate.grid.map(function(value,index){return/*#__PURE__*/React.createElement(Square,{val:value.toString(),index:index,gamestate:_objectSpread({isPlayer_one:_this.props.isPlayer_one},gamestate)});}));};return _this;}return Board;}(Component);export{Board as default};","map":{"version":3,"sources":["C:/Users/Tatar/Documents/Full Stack Projects/O Tic-Tac-Toe/client/src/components/Board.js"],"names":["React","Component","Square","socket","Board","playerMove","index","state","p1_turn","isPlayer_one","grid","emit","render","gamestate","props","map","value","toString"],"mappings":"+vBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAAQC,SAAR,KAAwB,OAAxB,CACA,MAAOC,CAAAA,MAAP,KAAmB,UAAnB,CACA,MAAOC,CAAAA,MAAP,KAAmB,gBAAnB,CAEA;;;;;;;;;;;;;KAgBqBC,CAAAA,K,uTAIjBC,U,CAAa,SAAAC,KAAK,CAAI,CAClB,GAAG,MAAKC,KAAL,CAAWC,OAAX,GAAuB,MAAKD,KAAL,CAAWE,YAAlC,EACI,MAAKF,KAAL,CAAWG,IAAX,CAAgBJ,KAAhB,IAAyB,CADhC,CACkC,CAC1B,GAAG,MAAKC,KAAL,CAAWE,YAAd,CAA2B,CACvBN,MAAM,CAACQ,IAAP,CAAY,aAAZ,CAA2BL,KAA3B,CAAkC,CAAlC,EACH,CAFD,IAGI,CACAH,MAAM,CAACQ,IAAP,CAAY,aAAZ,CAA2BL,KAA3B,CAAkC,CAAC,CAAnC,EACH,CACR,CACJ,C,OAGDM,M,CAAS,UAAM,CAEX,GAAMC,CAAAA,SAAS,CAAG,MAAKC,KAAL,CAAWD,SAA7B,CAEA,mBACI,2BAAK,SAAS,CAAC,OAAf,EACKA,SAAS,CAACH,IAAV,CAAeK,GAAf,CAAmB,SAACC,KAAD,CAAOV,KAAP,CAAiB,CACjC,mBAAO,oBAAC,MAAD,EAAQ,GAAG,CAAEU,KAAK,CAACC,QAAN,EAAb,CAA+B,KAAK,CAAEX,KAAtC,CAA6C,SAAS,gBAAGG,YAAY,CAAC,MAAKK,KAAL,CAAWL,YAA3B,EAA4CI,SAA5C,CAAtD,EAAP,CACH,CAFA,CADL,CADJ,CAYH,C,8BAjC8BZ,S,SAAdG,K","sourcesContent":["import React from 'react';\r\nimport {Component} from 'react';\r\nimport Square from './Square';\r\nimport socket from './../apis/port';\r\n\r\n/*\r\ngameState = {            //packaged data sent to frontend\r\n    p1_name: \"\",\r\n    p2_name: \"\",\r\n    p1_score: 0,\r\n    p2_score: 0,\r\n    ties: 0,\r\n    p1_turn: true,\r\n    grid: [0,0,0,\r\n        0,0,0,\r\n        0,0,0]\r\n\r\n}\r\n*/\r\n\r\n\r\nexport default class Board extends Component {\r\n    \r\n    \r\n    \r\n    playerMove = index => {\r\n        if(this.state.p1_turn === this.state.isPlayer_one\r\n            && this.state.grid[index]===0){\r\n                if(this.state.isPlayer_one){\r\n                    socket.emit(\"player-move\", index, 1);\r\n                }\r\n                else{\r\n                    socket.emit(\"player-move\", index, -1);\r\n                }\r\n        }\r\n    }\r\n\r\n//note to self, when prop is changed state is not changed\r\n    render = () => {\r\n        \r\n        const gamestate = this.props.gamestate;\r\n    \r\n        return (\r\n            <div className=\"board\">\r\n                {gamestate.grid.map((value,index) => {\r\n                    return <Square val={value.toString()} index={index} gamestate={{isPlayer_one:this.props.isPlayer_one, ...gamestate}}/>\r\n                }) }\r\n\r\n            \r\n                \r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}