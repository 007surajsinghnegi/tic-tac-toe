{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tatar\\\\Documents\\\\Full Stack Projects\\\\O Tic-Tac-Toe - Copy\\\\client\\\\src\\\\components\\\\Board.js\";\nimport React from 'react';\nimport { Component } from 'react';\nimport Square from './Square';\nimport socket from './../apis/port';\n/*\r\ngameState = {            //packaged data sent to frontend\r\n    p1_name: \"\",\r\n    p2_name: \"\",\r\n    p1_score: 0,\r\n    p2_score: 0,\r\n    ties: 0,\r\n    p1_turn: true,\r\n    grid: [0,0,0,\r\n        0,0,0,\r\n        0,0,0]\r\n\r\n}\r\n*/\n\nexport default class Board extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = { ...this.props.gamestate,\n      isPlayer_one: this.props.isPlayer_one\n    };\n\n    this.playerMove = index => {\n      if (this.state.p1_turn === this.state.isPlayer_one && this.state.grid[index] === 0) {\n        if (this.state.isPlayer_one) {\n          socket.emit(\"player-move\", index, 1);\n        } else {\n          socket.emit(\"player-move\", index, -1);\n        }\n      }\n    };\n\n    this.render = () => {\n      const gamestate = this.props.gamestate;\n      console.log(gamestate);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }\n      }, grid.map((value, index) => {\n        return /*#__PURE__*/React.createElement(Square, {\n          val: value.toString(),\n          index: index,\n          gamestate: this.state,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 28\n          }\n        });\n      }));\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Tatar/Documents/Full Stack Projects/O Tic-Tac-Toe - Copy/client/src/components/Board.js"],"names":["React","Component","Square","socket","Board","state","props","gamestate","isPlayer_one","playerMove","index","p1_turn","grid","emit","render","console","log","map","value","toString"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,QAAwB,OAAxB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AAEA;;;;;;;;;;;;;;;AAgBA,eAAe,MAAMC,KAAN,SAAoBH,SAApB,CAA8B;AAAA;AAAA;AAAA,SAEzCI,KAFyC,GAEjC,EACJ,GAAG,KAAKC,KAAL,CAAWC,SADV;AAEJC,MAAAA,YAAY,EAAE,KAAKF,KAAL,CAAWE;AAFrB,KAFiC;;AAAA,SAOzCC,UAPyC,GAO5BC,KAAK,IAAI;AAClB,UAAG,KAAKL,KAAL,CAAWM,OAAX,KAAuB,KAAKN,KAAL,CAAWG,YAAlC,IACI,KAAKH,KAAL,CAAWO,IAAX,CAAgBF,KAAhB,MAAyB,CADhC,EACkC;AAC1B,YAAG,KAAKL,KAAL,CAAWG,YAAd,EAA2B;AACvBL,UAAAA,MAAM,CAACU,IAAP,CAAY,aAAZ,EAA2BH,KAA3B,EAAkC,CAAlC;AACH,SAFD,MAGI;AACAP,UAAAA,MAAM,CAACU,IAAP,CAAY,aAAZ,EAA2BH,KAA3B,EAAkC,CAAC,CAAnC;AACH;AACR;AACJ,KAjBwC;;AAAA,SAoBzCI,MApByC,GAoBhC,MAAM;AAIX,YAAMP,SAAS,GAAG,KAAKD,KAAL,CAAWC,SAA7B;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYT,SAAZ;AAGA,0BAEI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKK,IAAI,CAACK,GAAL,CAAS,CAACC,KAAD,EAAOR,KAAP,KAAiB;AACvB,4BAAO,oBAAC,MAAD;AAAQ,UAAA,GAAG,EAAEQ,KAAK,CAACC,QAAN,EAAb;AAA+B,UAAA,KAAK,EAAET,KAAtC;AAA6C,UAAA,SAAS,EAAE,KAAKL,KAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,OAFA,CADL,CAFJ;AAYH,KAxCwC;AAAA;;AAAA","sourcesContent":["import React from 'react';\r\nimport {Component} from 'react';\r\nimport Square from './Square';\r\nimport socket from './../apis/port';\r\n\r\n/*\r\ngameState = {            //packaged data sent to frontend\r\n    p1_name: \"\",\r\n    p2_name: \"\",\r\n    p1_score: 0,\r\n    p2_score: 0,\r\n    ties: 0,\r\n    p1_turn: true,\r\n    grid: [0,0,0,\r\n        0,0,0,\r\n        0,0,0]\r\n\r\n}\r\n*/\r\n\r\n\r\nexport default class Board extends Component {\r\n    \r\n    state = {\r\n        ...this.props.gamestate,\r\n        isPlayer_one: this.props.isPlayer_one\r\n    }\r\n    \r\n    playerMove = index => {\r\n        if(this.state.p1_turn === this.state.isPlayer_one\r\n            && this.state.grid[index]===0){\r\n                if(this.state.isPlayer_one){\r\n                    socket.emit(\"player-move\", index, 1);\r\n                }\r\n                else{\r\n                    socket.emit(\"player-move\", index, -1);\r\n                }\r\n        }\r\n    }\r\n\r\n//note to self, when prop is changed state is not changed\r\n    render = () => {\r\n        \r\n\r\n\r\n        const gamestate = this.props.gamestate;\r\n        console.log(gamestate);\r\n      \r\n        \r\n        return (\r\n            \r\n            <div className=\"board\">\r\n                {grid.map((value,index) => {\r\n                    return <Square val={value.toString()} index={index} gamestate={this.state}/>\r\n                })}\r\n\r\n            \r\n                \r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}